// -*- mode: groovy; coding: utf-8 -*-
// -*- mode: groovy; coding: utf-8 -*-
def app_envs = pipelineConfig.application_environments.keySet()

pipeline {
    agent any
    stages {
        stage('Run Tests') {
            parallel {
                stage('dev') {
                    steps {
                        script {
                            if (app_envs.contains(env.STAGE_NAME)) {
                              println "${env.STAGE_NAME}:" + dev.dump()
                            }
                        }
                    }                    
                }
                stage('test') {
                    steps {
                        script {
                            if (app_envs.contains(env.STAGE_NAME)) {
                                println "${env.STAGE_NAME}:" + test.dump()
                            }
                        }
                    }                    
                }
                stage('acc') {
                    steps {
                        script {
                            if (app_envs.contains(env.STAGE_NAME)) {
                                println "${env.STAGE_NAME}:" + acc.dump()
                            }
                        }
                    }                    
                }
                stage('prod') {
                    steps {
                        script {
                            if (app_envs.contains(env.STAGE_NAME)) {
                                println "${env.STAGE_NAME}:" + prod.dump()
                            }
                        }
                    }                    
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}
